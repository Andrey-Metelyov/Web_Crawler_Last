type: edu
custom_name: stage6
files:
- name: src/crawler/ApplicationRunner.java
  visible: true
  text: |
    package crawler;


    public class ApplicationRunner {
        public static void main(String[] args) {
            new WebCrawler();
        }
    }
  learner_created: false
- name: src/crawler/WebCrawler.java
  visible: true
  text: |
    package crawler;

    import javax.swing.*;
    import javax.swing.table.DefaultTableModel;
    import java.awt.*;
    import java.io.*;
    import java.net.MalformedURLException;
    import java.net.URL;
    import java.net.URLConnection;
    import java.nio.charset.StandardCharsets;
    import java.util.ArrayList;
    import java.util.List;
    import java.util.Optional;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class WebCrawler extends JFrame {
        JTextField textField;
        JLabel titleValueLabel;
        JTable table;
        JTextField exportFilePath;

        class URLRecord {
            String url;
            String title;

            public URLRecord(String url, String title) {
                this.url = url;
                this.title = title;
            }

            @Override
            public String toString() {
                return "URLRecord{" +
                        "url='" + url + '\'' +
                        ", title='" + title + '\'' +
                        '}';
            }

            @Override
            public boolean equals(Object o) {
                if (this == o) return true;
                if (o == null || getClass() != o.getClass()) return false;

                URLRecord urlRecord = (URLRecord) o;

                if (!url.equals(urlRecord.url)) return false;
                return title.equals(urlRecord.title);
            }

            @Override
            public int hashCode() {
                int result = url.hashCode();
                result = 31 * result + title.hashCode();
                return result;
            }
        }

        public WebCrawler() {
            setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            setSize(500, 300);
            setTitle("Web Crawler");

            JPanel panel = new JPanel();

            JLabel urlLabel = new JLabel("URL:");
            JLabel exportLabel = new JLabel("Export:");
            textField = new JTextField("https://www.wikipedia.org", 20);
            textField.setName("UrlTextField");

            exportFilePath = new JTextField("d:\\temp\\last.txt");
            exportFilePath.setName("ExportUrlTextField");

            JButton button = new JButton("Parse");
            button.setName("RunButton");
            button.addActionListener(e -> parseClicked());

            JButton exportButton = new JButton("Save");
            exportButton.setName("ExportButton");
            exportButton.addActionListener(e -> exportClicked());

            JLabel titleLabel = new JLabel("Title:");

            titleValueLabel = new JLabel("Example text");
            titleValueLabel.setName("TitleLabel");

            table = createTable();

            JScrollPane scrollPane = new JScrollPane(table);
            table.setFillsViewportHeight(true);
            table.setEnabled(false);

            SpringLayout layout = new SpringLayout();
            panel.setLayout(layout);
            panel.add(urlLabel);
            panel.add(textField);
            panel.add(button);
            panel.add(titleLabel);
            panel.add(titleValueLabel);
            panel.add(scrollPane);
            panel.add(exportLabel);
            panel.add(exportFilePath);
            panel.add(exportButton);

            layout.putConstraint(SpringLayout.NORTH, button, 5, SpringLayout.NORTH, panel);
            layout.putConstraint(SpringLayout.EAST, button, -5, SpringLayout.EAST, panel);
            layout.putConstraint(SpringLayout.VERTICAL_CENTER, textField, 0, SpringLayout.VERTICAL_CENTER, button);
            layout.putConstraint(SpringLayout.EAST, textField, -5, SpringLayout.WEST, button);
            layout.putConstraint(SpringLayout.WEST, urlLabel, 5, SpringLayout.WEST, panel);
            layout.putConstraint(SpringLayout.WEST, textField, 5, SpringLayout.EAST, urlLabel);
            layout.putConstraint(SpringLayout.VERTICAL_CENTER, urlLabel, 0, SpringLayout.VERTICAL_CENTER, button);

            layout.putConstraint(SpringLayout.WEST, titleLabel, 5, SpringLayout.WEST, panel);
            layout.putConstraint(SpringLayout.NORTH, titleLabel, 5, SpringLayout.SOUTH, textField);
            layout.putConstraint(SpringLayout.WEST, titleValueLabel, 5, SpringLayout.EAST, titleLabel);
            layout.putConstraint(SpringLayout.NORTH, titleValueLabel, 5, SpringLayout.SOUTH, textField);

            layout.putConstraint(SpringLayout.WEST, scrollPane, 5, SpringLayout.WEST, panel);
            layout.putConstraint(SpringLayout.EAST, scrollPane, -5, SpringLayout.EAST, panel);
            layout.putConstraint(SpringLayout.NORTH, scrollPane, 5, SpringLayout.SOUTH, titleLabel);
            layout.putConstraint(SpringLayout.SOUTH, scrollPane, -5, SpringLayout.NORTH, exportButton);

            layout.putConstraint(SpringLayout.SOUTH, exportButton, -5, SpringLayout.SOUTH, panel);
            layout.putConstraint(SpringLayout.EAST, exportButton, -5, SpringLayout.EAST, panel);
            layout.putConstraint(SpringLayout.VERTICAL_CENTER, exportFilePath, 0, SpringLayout.VERTICAL_CENTER, exportButton);
            layout.putConstraint(SpringLayout.EAST, exportFilePath, -5, SpringLayout.WEST, button);
            layout.putConstraint(SpringLayout.WEST, exportLabel, 5, SpringLayout.WEST, panel);
            layout.putConstraint(SpringLayout.WEST, exportFilePath, 5, SpringLayout.EAST, exportLabel);
            layout.putConstraint(SpringLayout.VERTICAL_CENTER, exportLabel, 0, SpringLayout.VERTICAL_CENTER, exportButton);

            add(panel, BorderLayout.CENTER);

            setVisible(true);
        }

        private void exportClicked() {
            DefaultTableModel tableModel = (DefaultTableModel) table.getModel();
            int columns = tableModel.getColumnCount();
            int rows = tableModel.getRowCount();
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < rows; i++) {
                for (int j = 0; j < columns; j++) {
                    sb.append(tableModel.getValueAt(i, j)).append(System.lineSeparator());
                }
            }
            System.out.println(sb);
            saveToFile(exportFilePath.getText(), sb.toString());
        }

        private void saveToFile(String fileName, String content) {
            File file = new File(fileName);
            try (FileWriter writer = new FileWriter(file);) {
                writer.write(content);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        private void parseClicked() {
            String address = textField.getText();
            String siteText = getWebPage(address);
    //        System.out.println(siteText);
    //        System.out.println("siteText:\n" + siteText);
            String title = findTitle(siteText);
    //        System.out.println("Title: " + title);
            titleValueLabel.setText(title);
            List<String> aTags = getATags(siteText);
            List<String> hrefAttributes = getHrefAttributes(aTags);
            System.out.println("hrefAttributes: " + hrefAttributes);
            List<String> links = fixLinks(address, hrefAttributes);
            System.out.println("links: " + links);
            List<URLRecord> urls = crawlLinks(links);
            URLRecord current = new URLRecord(address, title);
            if (!urls.contains(current)) {
                urls.add(current);
            }
            clearTable();
            fillTable(urls);
        }

        private List<URLRecord> crawlLinks(List<String> links) {
            List<URLRecord> result = new ArrayList<>();
            for (String link : links) {
                Optional<URLRecord> res = visitPage(link);
                if (res.isPresent()) {
                    result.add(res.get());
                    System.out.println(res.get());
                }
            }
            return result;
        }

        private Optional<URLRecord> visitPage(String link) {
            try {
                URL url = new URL(link);
                URLConnection connection = url.openConnection();
                connection.setRequestProperty("User-Agent",
                        "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0");
                String contentType = connection.getContentType();
                System.out.println(link + " content type: " + contentType);
                if (contentType != null && contentType.startsWith("text/html")) {
                    InputStream inputStream = connection.getInputStream();
                    String siteText = new String(inputStream.readAllBytes(), StandardCharsets.UTF_8);
                    return Optional.of(new URLRecord(link, findTitle(siteText)));
                }
            } catch (MalformedURLException e) {
                System.out.println("bad link: " + link);
    //            e.printStackTrace();
            } catch (IOException e) {
                System.out.println("unavailable page: " + link);
    //            e.printStackTrace();
            }
            return Optional.empty();
        }

        private List<String> fixLinks(String address, List<String> hrefAttributes) {
            String protocol = getProtocol(address);
            String rootAddress = getRootAddress(address);
            System.out.println(protocol);
            System.out.println(rootAddress);
            List<String> result = new ArrayList<>();
            for (String hrefAttribute : hrefAttributes) {
                String fixedLink = "";
                if (!hrefAttribute.contains("/")) {
                    fixedLink = rootAddress + "/" + hrefAttribute;
                } else {
                    String hrefProtocol = getProtocol(hrefAttribute);
                    if (hrefProtocol.isEmpty()) {
                        if (hrefAttribute.startsWith("//")) {
                            fixedLink = protocol + hrefAttribute;
                        } else if (hrefAttribute.equals("/")) {
                            fixedLink = rootAddress;
                        } else {
                            fixedLink = protocol + "//" + hrefAttribute;
                        }
                    } else {
                        fixedLink = hrefAttribute;
                    }
                }
                System.out.println(hrefAttribute + " -> " + fixedLink);
                result.add(fixedLink);
            }
            return result;
        }

        private String getRootAddress(String address) {
            String protocol = getProtocol(address);
            int lastSlashPosition = address.lastIndexOf("/");
            System.out.println(lastSlashPosition);
            return address.substring(0, (lastSlashPosition > protocol.length() + 2) ? lastSlashPosition : address.length());
        }

        private String getProtocol(String address) {
            return address.substring(0, address.indexOf(":") + 1);
        }

        private List<String> getHrefAttributes(List<String> aTags) {
            List<String> result = new ArrayList<>();
            Pattern pattern = Pattern.compile("\\s*href\\s*=\\s*(\"([^\"]*\")|'[^']*'|([^'\">\\s]+))");
            for (String aTag : aTags) {
    //            System.out.println(aTag);
                Matcher matcher = pattern.matcher(aTag);
                if (matcher.find()) {
                    String url = matcher.group(1);
                    result.add(url.substring(1, url.length() - 1));
    //                System.out.println(matcher.group(1));
                } else {
    //                System.out.println("not found");
                }
            }
            return result;
        }

        private void clearTable() {
            DefaultTableModel tableModel = (DefaultTableModel) table.getModel();
            tableModel.setRowCount(0);
        }

        private void fillTable(List<URLRecord> urls) {
            final String baseUrl = textField.getText();
            DefaultTableModel tableModel = (DefaultTableModel) table.getModel();
            for (URLRecord url : urls) {
                if (validUrl(url.url)) {
                    tableModel.addRow(new String[]{url.url, url.title});
                }
                System.out.println("url: " + url);
            }
        }

        private boolean validUrl(String url) {
    //        URLConnection =
            return true;
        }

        private List<String> getATags(String siteText) {
            List<String> result = new ArrayList<>();

            Pattern pattern = Pattern.compile("<a([^>]+)>(.+?)</a>");
            Matcher matcher = pattern.matcher(siteText);
            while (matcher.find()) {
                result.add(matcher.group(1));
            }

            return result;
        }

        private JTable createTable() {
            DefaultTableModel tableModel = new DefaultTableModel();
            tableModel.setColumnIdentifiers(new String[]{"URL", "Title"});
            JTable table = new JTable(tableModel);
            table.setName("TitlesTable");

            return table;
        }

        private String getWebPage(String url) {
    //        final String url = textField.getText();
            System.out.println(url);
            try (InputStream inputStream = new BufferedInputStream(new URL(url).openStream())) {
                String siteText = new String(inputStream.readAllBytes(), StandardCharsets.UTF_8);
    //            textArea.setText(siteText);
    //            System.out.println(siteText);
                return siteText;
            } catch (IOException e) {
                e.printStackTrace();
            }

            return "";
        }

        private String findTitle(String siteText) {
    //        <a\s+href=['\"](.+)['\"]>(.+)</a>
            Pattern pattern = Pattern.compile("<title>(.+)</title>");
            Matcher matcher = pattern.matcher(siteText);
            if (matcher.find()) {
                return matcher.group(1);
            } else {
                return "";
            }
        }
    }
  learner_created: false
- name: temp.log
  visible: true
  text: |
    http://localhost:25555/circular1
    circular1tiTle
    http://localhost:25555/exampleDotCom
    Example Domain
    http://localhost:25555/circular3
    circular3tiTle
  learner_created: false
- name: test/CrawlerTest.java
  visible: false
  text: |
    import common.WebCrawlerStage6Test;

    public class CrawlerTest extends WebCrawlerStage6Test {

    }
  learner_created: false
- name: test/common/WebCrawlerCommonTestGenerator.kt
  visible: false
  text: |
    package common

    import org.assertj.swing.fixture.AbstractJComponentFixture
    import org.hyperskill.hstest.v6.stage.SwingTest
    import org.hyperskill.hstest.v6.testcase.TestCase
    import javax.swing.JFrame

    fun frameTests(frameGetter: () -> JFrame): List<TestCase<WebCrawlerClue>> {
        return listOf(
            createWebCrawlerTest("Window is not visible") { frameGetter().isVisible.toCheckResult() },
            createWebCrawlerTest("Window title is empty") { frameGetter().title.isNotEmpty().toCheckResult() }
        )
    }

    class ComponentRequirements<ComponentType : AbstractJComponentFixture<*, *, *>>(
        val name: String,
        val isEnabled: Boolean,
        private val componentFinder: (String) -> ComponentType?
    ) {
        val suitableComponent: ComponentType? by lazy { componentFinder(name) }
    }

    fun existenceTests(vararg components: ComponentRequirements<*>): List<TestCase<WebCrawlerClue>> {
        fun generateExistenceTest(requirements: ComponentRequirements<*>): TestCase<WebCrawlerClue> {
            return createWebCrawlerTest("No suitable component '${requirements.name}' is found") {
                SwingTest.checkExistence { requirements.suitableComponent }.toCheckResult()
            }
        }

        return components.map(::generateExistenceTest)
    }

    fun componentsAreEnabledTests(vararg components: ComponentRequirements<*>): List<TestCase<WebCrawlerClue>> {
        fun generateIsEnabledTest(requirements: ComponentRequirements<*>): TestCase<WebCrawlerClue> {
            return if (requirements.isEnabled) {
                createWebCrawlerTest("'${requirements.name}' should be enabled") {
                    val component = requireNotNull(requirements.suitableComponent) {
                        "Should check for the component existence before"
                    }

                    return@createWebCrawlerTest component.isEnabled.toCheckResult()
                }
            } else {
                createWebCrawlerTest("'${requirements.name}' should be disabled") {
                    val component = requireNotNull(requirements.suitableComponent) {
                        "Should check for the component existence before"
                    }

                    return@createWebCrawlerTest (!component.isEnabled).toCheckResult()
                }
            }
        }

        return components.map(::generateIsEnabledTest)
    }
  learner_created: false
- name: test/common/WebCrawlerLocalhostPages.kt
  visible: false
  text: |
    package common

    import org.hyperskill.hstest.v6.mocks.web.WebPage
    import org.hyperskill.hstest.v6.mocks.web.WebServerMock
    import org.hyperskill.hstest.v6.testcase.TestCase

    fun <AttachType> TestCase<AttachType>.withLocalhostPagesOn(port: Int): TestCase<AttachType> {
        val webServerMock = WebServerMock(port).apply {
            pages.forEach { _, (_, content, relativeUrl) ->
                setPage(relativeUrl,
                        WebPage().setContent(content).setContentType("text/html")) }
        }

        return this.runWith(webServerMock)
    }

    data class PageProperties(val title: String, val content: String, val relativePath: String, val childUrls: Set<String>)

    val pages = mapOf(
        localhost(PORT, "/exampleDotCom") to PageProperties(
            "Example Domain",
            """<!doctype html>
    <html>
    <head>
        <title>Example Domain</title>

        <meta charset="utf-8" />
        <meta http-equiv="Content-type" content="text/html; charset=utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <style type="text/css">
        body {
            background-color: #f0f0f2;
            margin: 0;
            padding: 0;
            font-family: "Open Sans", "Helvetica Neue", Helvetica, Arial, sans-serif;

        }
        div {
            width: 600px;
            margin: 5em auto;
            padding: 50px;
            background-color: #fff;
            border-radius: 1em;
        }
        a:link, a:visited {
            color: #38488f;
            text-decoration: none;
        }
        @media (max-width: 700px) {
            body {
                background-color: #fff;
            }
            div {
                width: auto;
                margin: 0 auto;
                border-radius: 0;
                padding: 1em;
            }
        }
        </style>
    </head>

    <body>
    <div>
        <h1>Example of Example Domain</h1>
        <p>This domain is established to be used for illustrative examples in documents. You may use this
        domain in examples without prior coordination or asking for permission.</p>
        <p><a href="unavailablePage">More information...</a></p>
    </div>
    </body>
    </html>""",
            "/exampleDotCom",
            setOf(localhost(PORT, "/unavailablePage"))
        ),
        localhost(PORT, "/circular1") to PageProperties(
            "circular1tiTle",
            """
                |<!doctype html>
                |<html>
                |<head>
                |<title>circular1tiTle</title>
                |</head>
                |<body>
                |<a href="circular2">link1</a>
                |</body>
                |</html>
            """.trimMargin(),
            "/circular1",
            setOf(localhost(PORT, "/circular2"))
        ),
        localhost(PORT, "/circular2") to PageProperties(
            "circular2tiTle",
            """
                |<!doctype html>
                |<html>
                |<head>
                |<title>circular2tiTle</title>
                |</head>
                |<body>
                |<a href="circular3">link1</a>
                |</body>
                |</html>
            """.trimMargin(),
            "/circular2",
            setOf(localhost(PORT, "/circular3"))
        ),
        localhost(PORT, "/circular3") to PageProperties(
            "circular3tiTle",
            """
                |<!doctype html>
                |<html>
                |<head>
                |<title>circular3tiTle</title>
                |</head>
                |<body>
                |<a href="circular1">link</a>
                |<a href="exampleDotCom">link</a>
                |</body>
                |</html>
            """.trimMargin(),
            "/circular3",
            setOf(localhost(PORT, "/circular1"), localhost(PORT, "/exampleDotCom"))
        )
    )
  learner_created: false
- name: test/common/WebCrawlerStage6Test.kt
  visible: false
  text: |
    package common

    import org.hyperskill.hstest.v6.stage.SwingTest
    import org.hyperskill.hstest.v6.testcase.CheckResult
    import org.hyperskill.hstest.v6.testcase.TestCase

    import crawler.WebCrawler
    import org.assertj.swing.fixture.*
    import java.io.File

    abstract class WebCrawlerStage6Test : SwingTest<WebCrawlerClue>(WebCrawler()) {

        override fun generate(): List<TestCase<WebCrawlerClue>> {
            val urlText = ComponentRequirements("UrlTextField", isEnabled = true) { window.textBox(it) }
            val getButton = ComponentRequirements("RunButton", isEnabled = true) { window.toggleButton(it) }
            val saveButton = ComponentRequirements("ExportButton", isEnabled = true) { window.button(it) }
            val pathToFileText = ComponentRequirements("ExportUrlTextField", isEnabled = true) { window.textBox(it) }

            val depthText = ComponentRequirements("DepthTextField", isEnabled = true) { window.textBox(it) }
            val depthCheckBox = ComponentRequirements("DepthCheckBox", isEnabled = true) { window.checkBox(it) }
            val parsedLabel = ComponentRequirements("ParsedLabel", isEnabled = true) { window.label(it) }

            return frameTests(::frame) +
                    existenceTests(urlText, getButton, saveButton, pathToFileText, depthText, depthCheckBox, parsedLabel) +
                    componentsAreEnabledTests(
                        urlText,
                        getButton,
                        saveButton,
                        pathToFileText,
                        depthText,
                        depthCheckBox,
                        parsedLabel
                    ) +
                    stage5TestsWithJToggleButton(
                        getTextButtonRequirements = getButton,
                        locationTextFieldRequirements = urlText,
                        saveButtonRequirements = saveButton,
                        savePathTextFieldRequirements = pathToFileText,
                        depthTextFieldRequirements = depthText,
                        depthCheckBoxRequirements = depthCheckBox,
                        parsedLabelRequirements = parsedLabel,
                        depth = 1
                    ) +
                    stage5TestsWithJToggleButton(
                        getTextButtonRequirements = getButton,
                        locationTextFieldRequirements = urlText,
                        saveButtonRequirements = saveButton,
                        savePathTextFieldRequirements = pathToFileText,
                        depthTextFieldRequirements = depthText,
                        depthCheckBoxRequirements = depthCheckBox,
                        parsedLabelRequirements = parsedLabel,
                        depth = 2
                    ) +
                    stage5TestsWithJToggleButton(
                        getTextButtonRequirements = getButton,
                        locationTextFieldRequirements = urlText,
                        saveButtonRequirements = saveButton,
                        savePathTextFieldRequirements = pathToFileText,
                        depthTextFieldRequirements = depthText,
                        depthCheckBoxRequirements = depthCheckBox,
                        parsedLabelRequirements = parsedLabel,
                        depth = 100500
                    )
        }

        override fun check(reply: String, clue: WebCrawlerClue): CheckResult {
            return checkWebCrawlerTest(reply = reply, clue = clue)
        }
    }

    fun stage5TestsWithJToggleButton(
            saveButtonRequirements: ComponentRequirements<JButtonFixture>,
            getTextButtonRequirements: ComponentRequirements<JToggleButtonFixture>,
            locationTextFieldRequirements: ComponentRequirements<JTextComponentFixture>,
            savePathTextFieldRequirements: ComponentRequirements<JTextComponentFixture>,
            depthTextFieldRequirements: ComponentRequirements<JTextComponentFixture>? = null,
            depthCheckBoxRequirements: ComponentRequirements<JCheckBoxFixture>? = null,
            parsedLabelRequirements: ComponentRequirements<JLabelFixture>? = null,
            depth: Int
    ): List<TestCase<WebCrawlerClue>> {
        return listOf(
                createWebCrawlerTest {
                    val locationTextField = locationTextFieldRequirements.requireExistingComponent()
                    val getTextButton = getTextButtonRequirements.requireExistingComponent()
                    val saveButton = saveButtonRequirements.requireExistingComponent()
                    val savePathTextField = savePathTextFieldRequirements.requireExistingComponent()

                    val depthTextField = depthTextFieldRequirements?.requireExistingComponent()
                    val depthCheckBox = depthCheckBoxRequirements?.requireExistingComponent()
                    val parsedLabel = parsedLabelRequirements?.requireExistingComponent()

                    for (url in pages.keys) {
                        depthTextField?.setText("$depth")
                        depthCheckBox?.enable()

                        locationTextField.setText(url)

                        getTextButton.click()

                        val fileName = File("").absolutePath + "/temp.log"

                        savePathTextField.setText(fileName)

                        saveButton.click()

                        val file = File(fileName)

                        if (!file.exists()) {
                            return@createWebCrawlerTest fail("Your app doesn't create a file")
                        }

                        val contents = file.readText().lines().chunked(2).filter { it.size == 2 }
                        val deepUrls = url.deepUrls(depth)

                        if (contents.size != deepUrls.size) {
                            return@createWebCrawlerTest fail("File your app saves has a wrong lines number")
                        }

                        if (contents.map { it.first() }.toSet() != deepUrls) {
                            return@createWebCrawlerTest fail("File your app saves has a wrong child url")
                        }

                        val parsedCount = parsedLabel?.text()?.toIntOrNull()

                        if (parsedCount != deepUrls.size) {
                            return@createWebCrawlerTest fail("Parsed pages number your app shows is wrong")
                        }

                        for ((writtenUrl, writtenTitle) in contents) {
                            if (!pages.containsKey(writtenUrl)) {
                                return@createWebCrawlerTest fail("Your file contains a link " +
                                        "to the page that is unavailable. " +
                                        "You shouldn't write unavailable links to the file.")
                            }
                            if (pages.getValue(writtenUrl).title != writtenTitle) {
                                return@createWebCrawlerTest fail("File your app saves has a wrong pair of lines")
                            }
                        }
                    }

                    return@createWebCrawlerTest CheckResult(true)
                }.withLocalhostPagesOn(PORT)
        )
    }
  learner_created: false
- name: test/common/WebCrawlerUtil.kt
  visible: false
  text: |
    package common

    import org.assertj.swing.fixture.AbstractJComponentFixture
    import org.assertj.swing.fixture.JCheckBoxFixture
    import org.hyperskill.hstest.v6.testcase.CheckResult
    import org.hyperskill.hstest.v6.testcase.TestCase

    const val PORT = 25555  // TODO: maybe use another port?

    class WebCrawlerClue(val feedback: String?, val checker: () -> CheckResult)

    fun createWebCrawlerTest(feedback: String? = null, checker: () -> CheckResult): TestCase<WebCrawlerClue> {
        return TestCase<WebCrawlerClue>()
            .setAttach(
                WebCrawlerClue(
                    feedback = feedback,
                    checker = checker
                )
            )
    }

    fun checkWebCrawlerTest(reply: String, clue: WebCrawlerClue): CheckResult {
        return try {
            val (result, feedback) = clue.checker()

            CheckResult(result, clue.feedback ?: feedback)
        } catch (e: AssertionError) {
            CheckResult(false, clue.feedback)
        }
    }

    private operator fun CheckResult.component1() = isCorrect
    private operator fun CheckResult.component2() = feedback

    fun Boolean.toCheckResult() = CheckResult(this)

    fun fail(message: String) = CheckResult(false, message)

    fun htmlTextsAreEqual(source: String, inTextField: String): Boolean {
        fun String.formatted(): String {
            return this.trim().replace("\r\n", "\n").replace("\r", "\n")
        }

        return source.formatted() == inTextField.formatted()
    }

    fun <ComponentType : AbstractJComponentFixture<*, *, *>> ComponentRequirements<ComponentType>.requireExistingComponent(): ComponentType {
        return requireNotNull(this.suitableComponent) {
            "Must check for the '${this.name}' component existence before this test"
        }
    }

    fun localhost(port: Int, url: String) = "http://localhost:$port$url"

    fun String.deepUrls(depth: Int): Set<String> {
        return deepUrlsOld(depth) + setOf(this)
    }

    fun String.deepUrlsOld(depth: Int): Set<String> {
        fun String.childrenOrEmpty(): Set<String> {
            val pageProperties = pages[this]

            if (depth < 0 || pageProperties == null) {
                return emptySet()
            }

            return pageProperties.childUrls.filter { it in pages }.toSet()
        }

        var remainingDepth = depth - 1
        val answer = this.childrenOrEmpty().toMutableSet()
        while (remainingDepth > 0) {
            val next = answer.flatMap { it.childrenOrEmpty() } - answer

            if (next.isEmpty()) {
                break
            }

            answer.addAll(next)

            --remainingDepth
        }

        return answer
    }

    fun JCheckBoxFixture.enable() {
        if (!this.isEnabled) {
            this.click()
        }
    }
  learner_created: false
- name: src/crawler/URLTask.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/59/stages/322/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/59/stages/322/implement">JetBrains
    Academy</a>
  time: Sun, 18 Oct 2020 10:31:47 UTC
record: 5
